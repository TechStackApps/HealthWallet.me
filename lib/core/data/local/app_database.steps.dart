// dart format width=80
import 'package:drift/internal/versioned_schema.dart' as i0;
import 'package:drift/drift.dart' as i1;
import 'package:drift/drift.dart'; // ignore_for_file: type=lint,unused_import

// GENERATED BY drift_dev, DO NOT MODIFY.
final class Schema2 extends i0.VersionedSchema {
  Schema2({required super.database}) : super(version: 2);
  @override
  late final List<i1.DatabaseSchemaEntity> entities = [
    fhirResource,
    sources,
    recordAttachments,
    resourceType,
    resourceId,
  ];
  late final Shape0 fhirResource = Shape0(
      source: i0.VersionedTable(
        entityName: 'fhir_resource',
        withoutRowId: false,
        isStrict: false,
        tableConstraints: [
          'PRIMARY KEY(id)',
        ],
        columns: [
          _column_0,
          _column_1,
          _column_2,
          _column_3,
          _column_4,
          _column_5,
          _column_6,
          _column_7,
          _column_8,
        ],
        attachedDatabase: database,
      ),
      alias: null);
  late final Shape1 sources = Shape1(
      source: i0.VersionedTable(
        entityName: 'sources',
        withoutRowId: false,
        isStrict: false,
        tableConstraints: [
          'PRIMARY KEY(id)',
        ],
        columns: [
          _column_0,
          _column_9,
          _column_10,
        ],
        attachedDatabase: database,
      ),
      alias: null);
  late final Shape2 recordAttachments = Shape2(
      source: i0.VersionedTable(
        entityName: 'record_attachments',
        withoutRowId: false,
        isStrict: false,
        tableConstraints: [],
        columns: [
          _column_11,
          _column_12,
          _column_13,
          _column_14,
        ],
        attachedDatabase: database,
      ),
      alias: null);
  final i1.Index resourceType = i1.Index('resourceType',
      'CREATE INDEX resourceType ON fhir_resource (resource_type)');
  final i1.Index resourceId = i1.Index(
      'resourceId', 'CREATE INDEX resourceId ON fhir_resource (resource_id)');
}

class Shape0 extends i0.VersionedTable {
  Shape0({required super.source, required super.alias}) : super.aliased();
  i1.GeneratedColumn<String> get id =>
      columnsByName['id']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<String> get sourceId =>
      columnsByName['source_id']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<String> get resourceType =>
      columnsByName['resource_type']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<String> get resourceId =>
      columnsByName['resource_id']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<String> get title =>
      columnsByName['title']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<DateTime> get date =>
      columnsByName['date']! as i1.GeneratedColumn<DateTime>;
  i1.GeneratedColumn<String> get resourceRaw =>
      columnsByName['resource_raw']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<String> get encounterId =>
      columnsByName['encounter_id']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<String> get subjectId =>
      columnsByName['subject_id']! as i1.GeneratedColumn<String>;
}

i1.GeneratedColumn<String> _column_0(String aliasedName) =>
    i1.GeneratedColumn<String>('id', aliasedName, false,
        type: i1.DriftSqlType.string);
i1.GeneratedColumn<String> _column_1(String aliasedName) =>
    i1.GeneratedColumn<String>('source_id', aliasedName, true,
        type: i1.DriftSqlType.string);
i1.GeneratedColumn<String> _column_2(String aliasedName) =>
    i1.GeneratedColumn<String>('resource_type', aliasedName, true,
        type: i1.DriftSqlType.string);
i1.GeneratedColumn<String> _column_3(String aliasedName) =>
    i1.GeneratedColumn<String>('resource_id', aliasedName, true,
        type: i1.DriftSqlType.string);
i1.GeneratedColumn<String> _column_4(String aliasedName) =>
    i1.GeneratedColumn<String>('title', aliasedName, true,
        type: i1.DriftSqlType.string);
i1.GeneratedColumn<DateTime> _column_5(String aliasedName) =>
    i1.GeneratedColumn<DateTime>('date', aliasedName, true,
        type: i1.DriftSqlType.dateTime);
i1.GeneratedColumn<String> _column_6(String aliasedName) =>
    i1.GeneratedColumn<String>('resource_raw', aliasedName, false,
        type: i1.DriftSqlType.string);
i1.GeneratedColumn<String> _column_7(String aliasedName) =>
    i1.GeneratedColumn<String>('encounter_id', aliasedName, true,
        type: i1.DriftSqlType.string);
i1.GeneratedColumn<String> _column_8(String aliasedName) =>
    i1.GeneratedColumn<String>('subject_id', aliasedName, true,
        type: i1.DriftSqlType.string);

class Shape1 extends i0.VersionedTable {
  Shape1({required super.source, required super.alias}) : super.aliased();
  i1.GeneratedColumn<String> get id =>
      columnsByName['id']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<String> get name =>
      columnsByName['name']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<String> get logo =>
      columnsByName['logo']! as i1.GeneratedColumn<String>;
}

i1.GeneratedColumn<String> _column_9(String aliasedName) =>
    i1.GeneratedColumn<String>('name', aliasedName, true,
        type: i1.DriftSqlType.string);
i1.GeneratedColumn<String> _column_10(String aliasedName) =>
    i1.GeneratedColumn<String>('logo', aliasedName, true,
        type: i1.DriftSqlType.string);

class Shape2 extends i0.VersionedTable {
  Shape2({required super.source, required super.alias}) : super.aliased();
  i1.GeneratedColumn<int> get id =>
      columnsByName['id']! as i1.GeneratedColumn<int>;
  i1.GeneratedColumn<String> get resourceId =>
      columnsByName['resource_id']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<String> get filePath =>
      columnsByName['file_path']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<DateTime> get timestamp =>
      columnsByName['timestamp']! as i1.GeneratedColumn<DateTime>;
}

i1.GeneratedColumn<int> _column_11(String aliasedName) =>
    i1.GeneratedColumn<int>('id', aliasedName, false,
        hasAutoIncrement: true,
        type: i1.DriftSqlType.int,
        defaultConstraints:
            i1.GeneratedColumn.constraintIsAlways('PRIMARY KEY AUTOINCREMENT'));
i1.GeneratedColumn<String> _column_12(String aliasedName) =>
    i1.GeneratedColumn<String>('resource_id', aliasedName, false,
        type: i1.DriftSqlType.string,
        defaultConstraints: i1.GeneratedColumn.constraintIsAlways(
            'REFERENCES fhir_resource (id)'));
i1.GeneratedColumn<String> _column_13(String aliasedName) =>
    i1.GeneratedColumn<String>('file_path', aliasedName, false,
        type: i1.DriftSqlType.string);
i1.GeneratedColumn<DateTime> _column_14(String aliasedName) =>
    i1.GeneratedColumn<DateTime>('timestamp', aliasedName, false,
        type: i1.DriftSqlType.dateTime);

final class Schema3 extends i0.VersionedSchema {
  Schema3({required super.database}) : super(version: 3);
  @override
  late final List<i1.DatabaseSchemaEntity> entities = [
    fhirResource,
    sources,
    recordAttachments,
    recordNotes,
    resourceType,
    resourceId,
  ];
  late final Shape0 fhirResource = Shape0(
      source: i0.VersionedTable(
        entityName: 'fhir_resource',
        withoutRowId: false,
        isStrict: false,
        tableConstraints: [
          'PRIMARY KEY(id)',
        ],
        columns: [
          _column_0,
          _column_1,
          _column_2,
          _column_3,
          _column_4,
          _column_5,
          _column_6,
          _column_7,
          _column_8,
        ],
        attachedDatabase: database,
      ),
      alias: null);
  late final Shape1 sources = Shape1(
      source: i0.VersionedTable(
        entityName: 'sources',
        withoutRowId: false,
        isStrict: false,
        tableConstraints: [
          'PRIMARY KEY(id)',
        ],
        columns: [
          _column_0,
          _column_9,
          _column_10,
        ],
        attachedDatabase: database,
      ),
      alias: null);
  late final Shape2 recordAttachments = Shape2(
      source: i0.VersionedTable(
        entityName: 'record_attachments',
        withoutRowId: false,
        isStrict: false,
        tableConstraints: [],
        columns: [
          _column_11,
          _column_12,
          _column_13,
          _column_14,
        ],
        attachedDatabase: database,
      ),
      alias: null);
  late final Shape3 recordNotes = Shape3(
      source: i0.VersionedTable(
        entityName: 'record_notes',
        withoutRowId: false,
        isStrict: false,
        tableConstraints: [],
        columns: [
          _column_11,
          _column_12,
          _column_15,
          _column_14,
        ],
        attachedDatabase: database,
      ),
      alias: null);
  final i1.Index resourceType = i1.Index('resourceType',
      'CREATE INDEX resourceType ON fhir_resource (resource_type)');
  final i1.Index resourceId = i1.Index(
      'resourceId', 'CREATE INDEX resourceId ON fhir_resource (resource_id)');
}

class Shape3 extends i0.VersionedTable {
  Shape3({required super.source, required super.alias}) : super.aliased();
  i1.GeneratedColumn<int> get id =>
      columnsByName['id']! as i1.GeneratedColumn<int>;
  i1.GeneratedColumn<String> get resourceId =>
      columnsByName['resource_id']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<String> get content =>
      columnsByName['content']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<DateTime> get timestamp =>
      columnsByName['timestamp']! as i1.GeneratedColumn<DateTime>;
}

i1.GeneratedColumn<String> _column_15(String aliasedName) =>
    i1.GeneratedColumn<String>('content', aliasedName, false,
        type: i1.DriftSqlType.string);

final class Schema4 extends i0.VersionedSchema {
  Schema4({required super.database}) : super(version: 4);
  @override
  late final List<i1.DatabaseSchemaEntity> entities = [
    fhirResource,
    sources,
    recordAttachments,
    recordNotes,
    resourceType,
    resourceId,
  ];
  late final Shape4 fhirResource = Shape4(
      source: i0.VersionedTable(
        entityName: 'fhir_resource',
        withoutRowId: false,
        isStrict: false,
        tableConstraints: [
          'PRIMARY KEY(id)',
        ],
        columns: [
          _column_0,
          _column_1,
          _column_2,
          _column_3,
          _column_4,
          _column_5,
          _column_6,
          _column_7,
          _column_8,
          _column_16,
        ],
        attachedDatabase: database,
      ),
      alias: null);
  late final Shape5 sources = Shape5(
      source: i0.VersionedTable(
        entityName: 'sources',
        withoutRowId: false,
        isStrict: false,
        tableConstraints: [
          'PRIMARY KEY(id)',
        ],
        columns: [
          _column_0,
          _column_9,
          _column_10,
          _column_17,
        ],
        attachedDatabase: database,
      ),
      alias: null);
  late final Shape2 recordAttachments = Shape2(
      source: i0.VersionedTable(
        entityName: 'record_attachments',
        withoutRowId: false,
        isStrict: false,
        tableConstraints: [],
        columns: [
          _column_11,
          _column_12,
          _column_13,
          _column_14,
        ],
        attachedDatabase: database,
      ),
      alias: null);
  late final Shape3 recordNotes = Shape3(
      source: i0.VersionedTable(
        entityName: 'record_notes',
        withoutRowId: false,
        isStrict: false,
        tableConstraints: [],
        columns: [
          _column_11,
          _column_12,
          _column_15,
          _column_14,
        ],
        attachedDatabase: database,
      ),
      alias: null);
  final i1.Index resourceType = i1.Index('resourceType',
      'CREATE INDEX resourceType ON fhir_resource (resource_type)');
  final i1.Index resourceId = i1.Index(
      'resourceId', 'CREATE INDEX resourceId ON fhir_resource (resource_id)');
}

class Shape4 extends i0.VersionedTable {
  Shape4({required super.source, required super.alias}) : super.aliased();
  i1.GeneratedColumn<String> get id =>
      columnsByName['id']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<String> get sourceId =>
      columnsByName['source_id']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<String> get resourceType =>
      columnsByName['resource_type']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<String> get resourceId =>
      columnsByName['resource_id']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<String> get title =>
      columnsByName['title']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<DateTime> get date =>
      columnsByName['date']! as i1.GeneratedColumn<DateTime>;
  i1.GeneratedColumn<String> get resourceRaw =>
      columnsByName['resource_raw']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<String> get encounterId =>
      columnsByName['encounter_id']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<String> get subjectId =>
      columnsByName['subject_id']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<DateTime> get updatedAt =>
      columnsByName['updated_at']! as i1.GeneratedColumn<DateTime>;
}

i1.GeneratedColumn<DateTime> _column_16(String aliasedName) =>
    i1.GeneratedColumn<DateTime>('updated_at', aliasedName, true,
        type: i1.DriftSqlType.dateTime);

class Shape5 extends i0.VersionedTable {
  Shape5({required super.source, required super.alias}) : super.aliased();
  i1.GeneratedColumn<String> get id =>
      columnsByName['id']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<String> get name =>
      columnsByName['name']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<String> get logo =>
      columnsByName['logo']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<String> get labelSource =>
      columnsByName['label_source']! as i1.GeneratedColumn<String>;
}

i1.GeneratedColumn<String> _column_17(String aliasedName) =>
    i1.GeneratedColumn<String>('label_source', aliasedName, true,
        type: i1.DriftSqlType.string);

final class Schema5 extends i0.VersionedSchema {
  Schema5({required super.database}) : super(version: 5);
  @override
  late final List<i1.DatabaseSchemaEntity> entities = [
    fhirResource,
    sources,
    recordAttachments,
    recordNotes,
    resourceType,
    resourceId,
  ];
  late final Shape4 fhirResource = Shape4(
      source: i0.VersionedTable(
        entityName: 'fhir_resource',
        withoutRowId: false,
        isStrict: false,
        tableConstraints: [
          'PRIMARY KEY(id)',
        ],
        columns: [
          _column_0,
          _column_1,
          _column_2,
          _column_3,
          _column_4,
          _column_5,
          _column_6,
          _column_7,
          _column_8,
          _column_16,
        ],
        attachedDatabase: database,
      ),
      alias: null);
  late final Shape5 sources = Shape5(
      source: i0.VersionedTable(
        entityName: 'sources',
        withoutRowId: false,
        isStrict: false,
        tableConstraints: [
          'PRIMARY KEY(id)',
        ],
        columns: [
          _column_0,
          _column_9,
          _column_10,
          _column_17,
        ],
        attachedDatabase: database,
      ),
      alias: null);
  late final Shape2 recordAttachments = Shape2(
      source: i0.VersionedTable(
        entityName: 'record_attachments',
        withoutRowId: false,
        isStrict: false,
        tableConstraints: [],
        columns: [
          _column_11,
          _column_12,
          _column_13,
          _column_14,
        ],
        attachedDatabase: database,
      ),
      alias: null);
  late final Shape3 recordNotes = Shape3(
      source: i0.VersionedTable(
        entityName: 'record_notes',
        withoutRowId: false,
        isStrict: false,
        tableConstraints: [],
        columns: [
          _column_11,
          _column_12,
          _column_15,
          _column_14,
        ],
        attachedDatabase: database,
      ),
      alias: null);
  final i1.Index resourceType = i1.Index('resourceType',
      'CREATE INDEX resourceType ON fhir_resource (resource_type)');
  final i1.Index resourceId = i1.Index(
      'resourceId', 'CREATE INDEX resourceId ON fhir_resource (resource_id)');
}

i0.MigrationStepWithVersion migrationSteps({
  required Future<void> Function(i1.Migrator m, Schema2 schema) from1To2,
  required Future<void> Function(i1.Migrator m, Schema3 schema) from2To3,
  required Future<void> Function(i1.Migrator m, Schema4 schema) from3To4,
  required Future<void> Function(i1.Migrator m, Schema5 schema) from4To5,
}) {
  return (currentVersion, database) async {
    switch (currentVersion) {
      case 1:
        final schema = Schema2(database: database);
        final migrator = i1.Migrator(database, schema);
        await from1To2(migrator, schema);
        return 2;
      case 2:
        final schema = Schema3(database: database);
        final migrator = i1.Migrator(database, schema);
        await from2To3(migrator, schema);
        return 3;
      case 3:
        final schema = Schema4(database: database);
        final migrator = i1.Migrator(database, schema);
        await from3To4(migrator, schema);
        return 4;
      case 4:
        final schema = Schema5(database: database);
        final migrator = i1.Migrator(database, schema);
        await from4To5(migrator, schema);
        return 5;
      default:
        throw ArgumentError.value('Unknown migration from $currentVersion');
    }
  };
}

i1.OnUpgrade stepByStep({
  required Future<void> Function(i1.Migrator m, Schema2 schema) from1To2,
  required Future<void> Function(i1.Migrator m, Schema3 schema) from2To3,
  required Future<void> Function(i1.Migrator m, Schema4 schema) from3To4,
  required Future<void> Function(i1.Migrator m, Schema5 schema) from4To5,
}) =>
    i0.VersionedSchema.stepByStepHelper(
        step: migrationSteps(
      from1To2: from1To2,
      from2To3: from2To3,
      from3To4: from3To4,
      from4To5: from4To5,
    ));
